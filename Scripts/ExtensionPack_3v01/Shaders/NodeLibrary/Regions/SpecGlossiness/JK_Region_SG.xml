<!--
===============================================================================
== Material Region Specular-Glossiness
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_Region_SG.xml
== Description: Material Region to modulate values throughout the flow of the graph
================================================================================
== Author: Jens Kafitz
== Web: www.campi3d.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: September, 3 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>JK_Region_Glossiness</ID>
    <DefaultName>Region (SpecGloss)</DefaultName>
    <Category>Material Regions/Specular-Glossiness/</Category>
    <Inputs>
        <Input Name="IN_A" PrettyName="Input A"/>
        <Input Name="IN_B" PrettyName="Input B"/>
        <Input Name="IN_C" PrettyName="Input C"/>
        <Input Name="RegionMask" />
        <Input Name="baseColor" PrettyName="Base Color" />
        <Input Name="glossiness" PrettyName="Glossiness"/>
        <Input Name="specular" PrettyName="Specular"/>
        <Input Name="height" PrettyName="Height"/>
        <Input Name="Normal"/>
    </Inputs>
    <Outputs>
        <Output Name="OUT_A" PrettyName="Output A"/>
        <Output Name="OUT_B" PrettyName="Output B"/>
        <Output Name="OUT_C" PrettyName="Output C"/>
        <Output Name="DEBUG" />
    </Outputs>
    <Attributes>
    <Attribute Name="useRegion" PrettyName="Activate Region" Type="bool" Min="false" Max="true">true</Attribute>
    <Attribute Name="debugmode" PrettyName="Debug Output" Group="" Type="userenum">baseColor,baseColor,glossiness,specular,height,Normal,vec4(0.0),regionMsk_debug,id_mask,Base Color,Glossiness,Specular,Height,Normal,-------------,Region Mask, Region Mask over ID</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="baseColor_Use" PrettyName="On/Off" Group="Handle Base Color (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="baseColor_color" PrettyName="Color" Group="Handle Base Color (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
    <Attribute Name="baseColor_float" PrettyName="Float" Group="Handle Base Color (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="baseColor_mix" PrettyName="Mix" Group="Handle Base Color (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="baseColor_BlendMode" PrettyName="Mode" Group="Handle Base Color (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="baseColor_clamp" PrettyName="Clamp Input" Group="Handle Base Color (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
     <!--===============================================================================================================-->
    <Attribute Name="glossiness_Use" PrettyName="On/Off" Group="Handle Glossiness (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="glossiness_float" PrettyName="Float" Group="Handle Glossiness (float)" Type="double">1.0</Attribute>
    <Attribute Name="glossiness_mix" PrettyName="Mix" Group="Handle Glossiness (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="glossiness_BlendMode" PrettyName="Mode" Group="Handle Glossiness (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="glossiness_clamp" PrettyName="Clamp Input" Group="Handle Glossiness (float)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="specular_Use" PrettyName="On/Off" Group="Handle Specular (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="specular_float" PrettyName="Float" Group="Handle Specular (float)" Type="double">1.0</Attribute>
    <Attribute Name="specular_mix" PrettyName="Mix" Group="Handle Specular (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="specular_BlendMode" PrettyName="Mode" Group="Handle Specular (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="specular_clamp" PrettyName="Clamp Input" Group="Handle Specular (float)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="height_Use" PrettyName="On/Off" Group="Handle Height (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="height_float" PrettyName="Float" Group="Handle Height (float)" Type="double">1.0</Attribute>
    <Attribute Name="height_mix" PrettyName="Mix" Group="Handle Height (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="height_BlendMode" PrettyName="Mode" Group="Handle Height (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="height_clamp" PrettyName="Clamp Input" Group="Handle Height (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="normal_Use" PrettyName="On/Off" Group="Handle Normal (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="normal_color" PrettyName="Color" Group="Handle Normal (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0.216,0.216,1.0,1.0)</Attribute>
    <Attribute Name="normal_float" PrettyName="Float" Group="Handle Normal (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="normal_mix" PrettyName="Mix" Group="Handle Normal (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="normal_BlendMode" PrettyName="Mode" Group="Handle Normal (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="normal_clamp" PrettyName="Clamp Input" Group="Handle Normal (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="idPick" PrettyName="On/Off" Group="Material Region ID" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="idColor" PrettyName="Mask ID" Group="Material Region ID" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0.0,0.0,0.0,1)</Attribute>
    <Attribute Name="idError" PrettyName="Max Error" Group="Material Region ID" Type="double" Min="0.0" Max="0.5">0.1</Attribute>
    <!--===============================================================================================================-->
</Attributes>
 <Groups>
     <Group Name="Handle Base Color (RGBA)" Expanded="false"></Group>
     <Group Name="Handle Glossiness (float)" Expanded="false"></Group>
     <Group Name="Handle Specular (float)" Expanded="false"></Group>
     <Group Name="Handle Height (float)" Expanded="false"></Group>
     <Group Name="Handle Normal (RGBA)" Expanded="false"></Group>
     <Group Name="Material Region ID" Expanded="false"></Group>
 </Groups>
 <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="IN_A"><Pos>-170,-40</Pos></Input>
                <Input Name="IN_B"><Pos>-170,-20</Pos></Input>
                <Input Name="IN_C"><Pos>-170,20</Pos></Input>
                <Input Name="RegionMask"><Pos>0,150</Pos></Input>

                <Input Name="baseColor"><Pos>40,-150</Pos></Input>
                <Input Name="glossiness"><Pos>-60,-150</Pos></Input>
                <Input Name="specular"><Pos>-120,-150</Pos></Input>
                <Input Name="height"><Pos>100,-150</Pos></Input>
                <Input Name="Normal"><Pos>160,-150</Pos></Input>


            </Inputs>

            <Outputs>
                <Output Name="OUT_C"><Pos>170,20</Pos></Output>
                <Output Name="OUT_B"><Pos>170,-20</Pos></Output>
                <Output Name="OUT_A"><Pos>170,-40</Pos></Output>
                <Output Name="DEBUG"><Pos>70,70</Pos></Output>
            </Outputs>

        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="baseColor"><Default>$baseColor_color*vec4($baseColor_float,$baseColor_float,$baseColor_float,1.0)</Default></Input>
                <Input Name="glossiness"><Default>vec4($glossiness_float,$glossiness_float,$glossiness_float,1.0) </Default></Input>
                <Input Name="specular"><Default>vec4($specular_float,$specular_float,$specular_float,1.0)</Default></Input>
                <Input Name="height"><Default>vec4($height_float,$height_float,$height_float,1.0)</Default></Input>
                <Input Name="Normal"><Default>$normal_color*vec4($normal_float,$normal_float,$normal_float,1.0)</Default></Input>

                <Input Name="IN_A"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_B"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_C"><Default>vec4(0.0)</Default></Input>
                <Input Name="RegionMask"><Default>vec4(1.0)</Default></Input>
                </Inputs>

   <Outputs>
                <Output Name="Debug"><Default>float(1.0)</Default></Output>
  </Outputs>
            </Shader>
            <Shader>
                <Body><![CDATA[


                 // Initalizing Attributes, necessary since <Default> on INPUTS doesn't do it
                 vec4 INIT_V4 =   $baseColor_color; INIT_V4 = $normal_color;
                 float INIT_FL =  $baseColor_float; INIT_FL = $glossiness_float; INIT_FL = $specular_float;
                            INIT_FL = $height_float; INIT_FL = $normal_float;


                // Casting # to Variable
                vec4 baseColor_handle = #baseColor ;
                vec4 glossiness_handle = #glossiness ;
                vec4 specular_handle = #specular ;
                vec4 height_handle = #height ;
                vec4 normal_handle = #Normal ;
                vec4 idColor_handle = sRgb2Linear($idColor);


                // Blending between clamped and unclamped.
                // CLamping here is only done directly on the region input (baseColor, glossiness etc.)
                // not on any values coming from another region
                vec4 baseColor_clamp = mix(baseColor_handle,clamp(baseColor_handle,vec4(0.0),vec4(1.0)),float($baseColor_clamp));
                vec4 glossiness_clamp = mix(glossiness_handle,clamp(glossiness_handle,vec4(0.0),vec4(1.0)),float($glossiness_clamp));
                vec4 specular_clamp = mix(specular_handle,clamp(specular_handle,vec4(0.0),vec4(1.0)),float($specular_clamp));
                vec4 height_clamp = mix(height_handle,clamp(height_handle,vec4(0.0),vec4(1.0)),float($height_clamp));
                vec4 normal_clamp = mix(normal_handle,clamp(normal_handle,vec4(0.0),vec4(1.0)),float($normal_clamp));
                float regionmask = $idPick ? col2Mask(#RegionMask,idColor_handle,$idError) : #RegionMask.r ;
                vec4 id_mask = mix(#RegionMask,vec4(regionmask,regionmask,regionmask,1.0),regionmask*float($idPick));
                regionmask = clamp(regionmask,0.0,1.0);
                // casting as new variable for DEBUG handle purposes only
                vec4 regionMsk_debug = vec4(regionmask,regionmask,regionmask,1.0);
                regionmask = regionmask * float($useRegion);



                // setting regionmask to 0 for values that are turned Off
                float baseColor_mix = (regionmask*$baseColor_mix) * float($baseColor_Use);
                float glossiness_mix = (regionmask*$glossiness_mix) * float($glossiness_Use);
                float specular_mix = (regionmask*$specular_mix) * float($specular_Use);
                float height_mix = (regionmask*$height_mix) * float($height_Use);
                float normal_mix = (regionmask*$normal_mix) * float($normal_Use);


                // Blending Values within the Region (RegionInput from other region and each Attribute)
                vec4 baseColor = $baseColor_BlendMode(#IN_A,baseColor_clamp,baseColor_mix);
                vec4 glossiness_Handle = vec4(#IN_B.r,#IN_B.r,#IN_B.r,1.0);
                vec4 glossiness = $glossiness_BlendMode(glossiness_Handle,glossiness_clamp,glossiness_mix);
                vec4 specular_Handle = vec4(#IN_B.g,#IN_B.g,#IN_B.g,1.0);
                vec4 specular = $specular_BlendMode(specular_Handle,specular_clamp,specular_mix);
                vec4 height_Handle = vec4(#IN_B.b,#IN_B.b,#IN_B.b,1.0);
                vec4 height = $height_BlendMode(height_Handle,height_clamp,height_mix);
                vec4 Normal = $normal_BlendMode(#IN_C,normal_clamp,normal_mix);



                // Output to Handles. Glossiness,specular & height are carried on signle variable
                OUT_A = baseColor;
                OUT_B = vec4(glossiness.r,specular.r,height.r,1.0);
                OUT_C = Normal;
                DEBUG = $debugmode;





                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

