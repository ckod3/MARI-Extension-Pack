<Node>
    <ID>Oren Nayar</ID>
    <Inputs>
        <Input Name="DiffuseColor" PrettyName="Diffuse Color" PreferredInput='1'></Input>
        <Input Name="DiffuseRoughness" PrettyName="Diffuse Roughness"></Input>
        <Input Name="Normal"></Input>
    </Inputs>
    <Attributes>
        <Attribute Name="DiffuseRoughness" Type="double" Min="0.0" Max="1.0">0.0</Attribute>
    </Attributes>
    <Tags>
        <Tag>_notcacheable</Tag>
        <Tag>_diffuse</Tag>
    </Tags>
    <Contexts>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="DiffuseColor"><Default>vec4(0,0,0,0)</Default></Input>
                    <Input Name="DiffuseRoughness"><Default>vec4(1,1,1,1)</Default></Input>
                    <Input Name="Normal"><Default>vec4(0,0,1,1)</Default></Input>
                </Inputs>
                <Body><![CDATA[

                vec3 V = normalize(-State.ViewVectorInEyeSpaceFromViewCamera);
                vec3 N = #Normal.xyz;

                vec3 Diffuse = vec3(0.0);
                float DiffuseRoughness = clamp($DiffuseRoughness*#DiffuseRoughness.r, 0.001,0.999);

                for(int i=0;i<4;i++)
                {
                    // Light Direction
                    vec3 L = normalize(u_MriLightSources[i].Position.xyz - State.FragmentPositionInEyeSpaceFromViewCamera);

                    // Light Visibility
                    float lightVisibility = mriLightVisibility( i, State.Position);

                    // Oren Nayar Diffuse
                    float orenNayar = nb_orenNayar(V,N,L,DiffuseRoughness);

                    Diffuse += (orenNayar) * u_MriLightSources[i].DiffuseColor.rgb * lightVisibility;
                }

                Output.rgb = Diffuse * #DiffuseColor.rgb;
                Output.a = #DiffuseColor.a;

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>