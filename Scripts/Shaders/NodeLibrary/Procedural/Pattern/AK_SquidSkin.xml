<Node>
  <ID>Squid Skin</ID>
  <Category>Procedural/Custom/Pattern/</Category>
  <Tags>
    <Tag>_procedural</Tag>
  </Tags>
  <DefaultName>Squid Skin</DefaultName>
  <Description>Organic squid style skin</Description>
  <Cost>0.1</Cost>
  <CostDescription>Texture reads</CostDescription>
  <Inputs>
    <Input Name="Input"/>
  </Inputs>
  <Attributes>
    <Attribute Name="Size" Group="" Type="double" Min="0" Max="2">0.4</Attribute>
    <Attribute Name="Strength" Group="" Type="double" Min="0" Max="1">0.4</Attribute>
    <Attribute Name="Sharpness" Group="" Type="double" Min="0" Max="1">0.4</Attribute>
    <Attribute Name="Roughness" Group="" Type="double" Min="0.5" Max="2">1</Attribute>
    <Attribute Name="colorA" PrettyName="Color" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0.33,0.134,0.385,1)</Attribute>
    <Attribute Name="XOffset" PrettyName="X Offset" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
    <Attribute Name="YOffset" PrettyName="Y Offset" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
    <Attribute Name="ZOffset" PrettyName="Z Offset" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
  </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Input"><Pos>0,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="Input"> <Default>State.Position</Default> </Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                    <Input Name="Input"> <Default>vec4(State.Position.xyz,0)</Default> </Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[

    const vec4 colB = vec4(0.0); 
    float roughness = $Roughness;
    vec3 seed = #Input.xyz; 
    vec3 offsetSeed = seed + vec3($XOffset,$YOffset,$ZOffset); 
    float noise_val = 0.0;
    float size_pow = (pow(10000.0,$Size*$Size)-1.0) + 0.0001;
    float Roughness = log2(1.0+99.0*$Roughness)/log2(100.0);
    for(int i=0;i<10;i++)
    {
        vec3 scaled_input = pow(8.0,float(i)) * offsetSeed / size_pow;

        noise_val += abs(noise(scaled_input))/pow(6.0-4.0*Roughness,float(i));

    }

    seed = vec3(noise_val) * seed + seed; 

    noise_val = 0.0;
    size_pow = (pow(10000.0,$Size*$Size)-1.0) + 0.0001;
    Roughness = log2(1.0+99.0*0.5)/log2(100.0); 
    for(int i=0;i<10;i++)
    {
        vec3 scaled_input = pow(2.0,float(i)) * seed.rgb / size_pow;
        noise_val += noise(scaled_input)/pow(6.0-4.0*Roughness,float(i));
    }
    noise_val = noise_val*$Sharpness + $Strength;
    Output = mix(colB,$colorA,noise_val);

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

