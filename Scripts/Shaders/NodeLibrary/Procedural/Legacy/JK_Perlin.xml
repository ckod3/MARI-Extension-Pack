<Node>
    <ID>Legacy Perlin</ID>
    <Category>Procedural/Custom/Perlin/</Category>
    <DefaultName>Perlin</DefaultName>
    <Description>Basic Perlin Noise</Description>
    <Cost>0.05</Cost>
    <CostDescription>Texture reads</CostDescription>
    <Inputs>
        <Input Name="Input"/>
    </Inputs>
    <Attributes>
        <!--===============================================================================================================-->
        <Attribute Name="colorA" PrettyName="Color A" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
        <Attribute Name="colorB" PrettyName="Color B" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0,0,0,1)</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="Size" Group="Size" Type="double" Min="0" Max="2">0.5</Attribute>
        <Attribute Name="Seed" Group="Size" PrettyName="Seed" Type="double" Min="1" Max="100000" Logarithmic="1">1</Attribute>
        <Attribute Name="Invert" PrettyName="Invert" Group="Size" Type="bool" Min="false" Max="true" Description="Inverts the Noise result before ColorA+B are applied" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="uv" PrettyName="UV Space" Group="Space" Type="bool" Min="false" Max="true" Description="Runs the noise 2d uv based, use offset/scale x/y and rotate z" >false</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XScale" PrettyName="Scale X" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <Attribute Name="YScale" PrettyName="Scale Y" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <Attribute Name="ZScale" PrettyName="Scale Z" Group="Transform Scale" Type="double" Min="0" Max="100" Logarithmic="1">1</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="rX" PrettyName="Rotate X" Group="Transform Rotation" Type="double" Min="0" Max="360">0</Attribute>
        <Attribute Name="rY" PrettyName="Rotate Y" Group="Transform Rotation" Type="double" Min="0" Max="360">0</Attribute>
        <Attribute Name="rZ" PrettyName="Rotate Z" Group="Transform Rotation" Type="double" Min="0" Max="360">0</Attribute>
        <!--===============================================================================================================-->
        <Attribute Name="XOffset" PrettyName="Translate X" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <Attribute Name="YOffset" PrettyName="Translate Y" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <Attribute Name="ZOffset" PrettyName="Translate Z" Group="Transform Translate" Type="double" Min="0" Max="100" Logarithmic="1">0</Attribute>
        <!--===============================================================================================================-->
    </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Input"><Pos>0,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="Input"> <Default>State.Position</Default> </Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                    <Input Name="Input"> <Default>State.Position</Default> </Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[

                // compensate for scene size by applying eponential growth
                float size_pow = (pow(10000.0,$Size*$Size)-1.0) + 0.0001;

                // 3d space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec3 trans = (vec3($XOffset,$YOffset,$ZOffset)*size_pow) + vec3($Seed);
                vec3 rotate = vec3($rX,$rY,$rZ);
                vec3 scale = vec3($XScale,$YScale,$ZScale);

                // transform the position to translate,rotate,scale the position
                vec3 P = positionTransform(State.Position,trans,rotate,scale);

                // 2d uv space surface position
                // build the needed vector attributes for position transform, offset max growths exponentially
                vec2 UVOffset = vec2($XOffset,$YOffset) + vec2($Seed);
                vec2 UVScale = vec2($XScale,$YScale);

                // transform the position to translate,rotate,scale the position
                vec2 InputScaleUV = relUVTransform(State.UV,$rZ,UVOffset,UVScale,0.5,0.5)/ (size_pow);

                // blend between 2d and 3d space position
                P = mix(P,vec3(InputScaleUV,1.0),float($uv));

                // noise variables
                vec3 scaled_seed = P / size_pow;
                float noise_val = noise(scaled_seed);
                noise_val = noise_val*0.5 + 0.5;

                // invert result
                float _invertResult = float($Invert);

                // perlin noise
                Output = mix(mix($colorB,$colorA,noise_val),mix($colorA,$colorB,noise_val),_invertResult);

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

