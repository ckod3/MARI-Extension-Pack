<Node>
    <ID>Axis Mask</ID>
    <Category>Geometry/Custom/</Category>
    <DefaultName>Axis Mask</DefaultName>
    <Cost>0.003</Cost>
    <CostDescription>Some Calculations</CostDescription>
    <Inputs>
        <Input Name="Input" />
    </Inputs>
    <Attributes>
        <Attribute Name="sX" PrettyName="X" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="sminX" PrettyName="-X" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="sY" PrettyName="Y" Type="bool" Min="false" Max="true" >true</Attribute>
        <Attribute Name="sminY" PrettyName="-Y" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="sZ" PrettyName="Z" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="sminZ" PrettyName="-Z" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="jitter" PrettyName="Jitter" Group="Remap" Type="double" Min="0.00000000000001" Max="1">0.00000000000001</Attribute>
        <Attribute Name="FO" PrettyName="Falloff" Group="Remap" Type="curve" >0,0,0.4025,0,0.47,0.137273,0.52,0.834091,0.575,0.996364,1,1</Attribute>
        <Attribute Name="Transparent" PrettyName="Black is transparent" Group="Remap" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="Inv" PrettyName="Invert" Group="Remap" Type="bool" Min="false" Max="true" >false</Attribute>
        <Attribute Name="rX" PrettyName="Rotate X" Group="Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rY" PrettyName="Rotate Y" Group="Rotate" Type="double" Min="0" Max="360" >0</Attribute>
        <Attribute Name="rZ" PrettyName="Rotate Z" Group="Rotate" Type="double" Min="0" Max="360" >0</Attribute>
    </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="Input"><Pos>0,-50</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="Input"> <Default>vec4(State.Normal,1.0)</Default> </Input>
                </Inputs>
            </Shader>
                <Shader ShaderType='TessEvaluation'>
                    <Inputs>
                        <Input Name="Input"> <Default>vec4(State.Normal.xyz,1.0)</Default> </Input>
                    </Inputs>
                </Shader>
                <Shader>
                <Body><![CDATA[

                // build rotational vec3 from sliders
                vec3 rotate = vec3($rX,$rY,$rZ);

                // build modified state.normal via mari function library call
                vec3 _P = positionTransform(State.Normal,vec3(0.0),rotate,vec3(1.0));

                // divisor for p in fbm jitter function
                float pow_J = pow($jitter,length(_P));

                //fbm function for jitter effect.
                float J = smoothfBm(_P/vec3(pow_J),6.0,1.0,1.0,1.0,0.5)-1.0;

                // mix between jittered and unjittered result. mix is never 100percent jittered since values are too high
                vec3 P = mix(_P,_P + vec3(J),$jitter/4);

                // separating positive and negative ps to determine direction
                float X = clamp(P.x,0.000000000,1000000000000000.0);
                float minX = clamp(P.x,0.0000000000,1000000000000000.0) - P.x;

                float Y = clamp(P.y,0.000000000,1000000000000000.0);
                float minY = clamp(P.y,0.000000000,1000000000000000.0) - P.y;

                float Z = clamp(P.z,0.000000000,1000000000000000.0);
                float minZ = clamp(P.z,0.000000000,1000000000000000.0) - P.z;

                float zero_a = 0.0;

                // mixing the clamped directions against 0 based on ui selection
                float resA = mix(zero_a,X,$sX);
                float resB = mix(zero_a,minX,$sminX);
                float resC = mix(zero_a,Y,$sY);
                float resD = mix(zero_a,minY,$sminY);
                float resE = mix(zero_a,Z,$sZ);
                float resF = mix(zero_a,minZ,$sminZ);

                // blending all ui selections together
                float _res = max(resA,resB);
                _res = max(_res,resC);
                _res = max(_res,resD);
                _res = max(_res,resE);
                _res = max(_res,resF);

                // looking up result against falloff curve
                _res = mriCurveLookup($FO,_res);

                // inverting
                _res = mix(_res,1-_res,$Inv);

                // output. if transparent color result is completely white and mask result is in alpha
                Output = mix(vec4(_res,_res,_res,1.0),vec4(1.0,1.0,1.0,_res),float($Transparent));

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

