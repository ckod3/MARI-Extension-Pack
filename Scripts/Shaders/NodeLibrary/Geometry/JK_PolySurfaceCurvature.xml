<Node>
    <ID>PolySurface Curvature</ID>
    <Category>Geometry/Custom/</Category>
    <DefaultName>Surface Curvature</DefaultName>
    <Cost>0.004</Cost>
    <CostDescription>Trivial operation</CostDescription>
    <Inputs>
        <Input Name="Position"></Input>
        <Input Name="Normal"></Input>
    </Inputs>
    <Attributes>
        <Attribute Name="Adjust" PrettyName="Adjust Curvature" Group="" Type="double" Logarithmic="1" Min="0" Max="1">0.1</Attribute>
        <Attribute Name="Size" PrettyName="Adjust Scenesize" Group="" Type="double" Logarithmic="1" Min="0" Max="1">0.1</Attribute>
        <Attribute Name="Invert" PrettyName="Invert" Group="" Type="bool" Min="false" Max="true" Description="Inverts the Noise result before ColorA+B are applied" >false</Attribute>
    </Attributes>
    <Contexts>
        <Context Type="NodeGraphView">
        <Inputs>
            <Input Name="Position"><Pos>100,-20</Pos></Input>
                <Input Name="Normal"><Pos>100,+20</Pos></Input>
            </Inputs>
        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                    <Input Name="Position"><Default>State.Position</Default></Input>
                    <Input Name="Normal"><Default>State.Normal</Default></Input>
                </Inputs>
            </Shader>
            <Shader ShaderType='TessEvaluation'>
                <Inputs>
                    <Input Name="Position"><Default>State.Position</Default></Input>
                    <Input Name="Normal"><Default>State.Normal</Default></Input>
                </Inputs>
            </Shader>
            <Shader>
                <Body><![CDATA[

                vec3 N = #Normal;
                vec3 P = #Position;

                float size_pow = (pow(10000.0,$Size*$Size)-1.0) + 0.0001;

                float tuneCurvature = $Adjust*size_pow;

                float curvN = length(fwidth(N));
                float curvP = length(fwidth(P));

                float mixer = clamp(curvN,0,1) / curvP;

                float curvature = clamp((mixer*tuneCurvature),0.0,1.0);
                float inv_curv = 1.0 - curvature;

                float _mix = mix(curvature,inv_curv,float($Invert));

                Output = vec4(_mix,_mix,_mix,1.0);

                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

