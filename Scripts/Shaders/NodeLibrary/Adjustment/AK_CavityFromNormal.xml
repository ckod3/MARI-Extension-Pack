<Node>
  <DefaultName>Cavity from Tangent Space Normal</DefaultName>
  <ID>Cavity from Tangent Space Normal</ID>
  <Category>/Custom/</Category>
  <Tags>
    <Tag>_adjustment</Tag>
  </Tags>
  <Cost>0.4</Cost>
  <CostDescription>Some calculations</CostDescription>
    <Inputs>
        <Input Name="Input"></Input>
        <Input Name="Height"></Input>
    </Inputs>
    <Attributes>
        <Attribute Name="wh" Group="Cavity Level" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
        <Attribute Name="md" Group="Cavity Level" Type="double" Min="0.0" Max="1.0">0.5</Attribute>
        <Attribute Name="blk" Group="Cavity Level" Type="double" Min="0.0" Max="1.0">0.0</Attribute>
        <Attribute Name="Invert" Group="" Type="bool" Min="true" Max="false">false</Attribute>

    </Attributes>
  <Contexts>
    <Context Type="NodeGraphView">
        <Inputs>
            <Input Name="Input"><Pos>0,-50</Pos></Input>
            <Input Name="Height" Tags="_invertable"><Default>vec4(1,1,1,1)</Default></Input>
        </Inputs>
    </Context>
    <Context Type="GLSL">
        <Shader>
            <Inputs>
                <Input Name="Input"><Default>vec4(1.0,1.0,1.0,1.0)</Default></Input>
            </Inputs>
            <Body><![CDATA[

            //

            float c1 = 1.5;
            float cp1 = 0.66;

            vec4 bp1 = vec4(0.0,0.0,0.0,0.0);
            vec4 wp1 = vec4(1.0,1.0,1.0,1.0);
            vec4 l1 = vec4(0.8,0.8,0.8,0.0);
            vec4 g1 = vec4(1.0,1.0,1.0,1.0);
            vec4 m1 = vec4(0.6,0.6,0.6,1.0);
            vec4 o1 = vec4(0.0,0.0,0.0,0.0);
            vec4 ga1 = vec4(1.0,1.0,1.0,1.0);

            bool rd = true;
            bool gr = true;
            bool bl = true;
            float wo = 1.0;
            float bo = 0.0;
            float wh = 1.0;
            float md = 0.649;
            float blk = 0.0;
            
            #define MS1 ggga 

            #define MS2 bbba
            
            bool rd2 = true;
            bool gr2 = true;
            bool bl2 = true;
            float wo2 = 1.0;
            float bo2 = 0.0;


            vec4 m_Input = #Input;

            vec4 m_Output;


    

{
    m_Output.rgb = (m_Input.rgb-vec3(cp1))*c1+vec3(cp1);
    m_Output.a = m_Input.a;
}

    m_Input = m_Output;
    
{ 
    vec4 A = m1 * ( g1 - l1 ) / ( wp1 - bp1 );
    vec4 B = o1 + l1 - A * bp1;
    vec4 C = A * m_Input + B;
    C = clamp(C, vec4(0.0), C);

    m_Output = pow( C, 1.0 / ga1 );
}
    m_Input = m_Output;

{
    float grad = (wo - bo) / (wh - blk);
    float ratio = (md - blk) / (wh - blk);
    float alpha = 1.0/pow(10.0, 1.0 - 2.0 * ratio);
    vec3 levelled = vec3(0);
    for (int i = 0; i != 3; ++i) {
        levelled[i] = m_Input[i] < blk ? bo : m_Input[i] < wh ? pow(bo + (m_Input[i] - blk) * grad, alpha) : wo;
    }m_Output.r = rd   ? levelled.r : m_Input.r;
    m_Output.g = gr ? levelled.g : m_Input.g;
    m_Output.b = bl  ? levelled.b : m_Input.b;
    m_Output.a = m_Input.a;
}
    m_Input = m_Output;

{
    m_Output = m_Input.MS1;
}

    m_Input = m_Output;

{
    m_Output = m_Input.MS2;
}

    m_Input = m_Output;

{
    float grad = (wo2 - bo2) / ($wh - $blk);
    float ratio = ($md - $blk) / ($wh - $blk);
    float alpha = 1.0/pow(10.0, 1.0 - 2.0 * ratio);
    vec3 levelled = vec3(0);
    for (int i = 0; i != 3; ++i) {
        levelled[i] = m_Input[i] < $blk ? bo2 : m_Input[i] < $wh ? pow(bo2 + (m_Input[i] - $blk) * grad, alpha) : wo2;
    }m_Output.r = rd2   ? levelled.r : m_Input.r;
    m_Output.g = gr2 ? levelled.g : m_Input.g;
    m_Output.b = bl2  ? levelled.b : m_Input.b;
    m_Output.a = m_Input.a;
}
    m_Input = m_Output;
    
{
    bool Invert = $Invert;
    m_Output   = m_Input;
    if (Invert) {
      m_Output = vec4 (1-m_Input.r, 1-m_Input.g, 1-m_Input.b, m_Input.a);
    }    
}
    
    Output = m_Output;


            ]]></Body>
        </Shader>
    </Context>
  </Contexts>

</Node>

