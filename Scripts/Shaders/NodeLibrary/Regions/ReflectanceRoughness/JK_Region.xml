<!--
===============================================================================
== Mari Ideascale Procedural Library
== Copyright (c) 2015 Jens Kafitz. All Rights Reserved.
================================================================================
== File: JK_Region.xml
== Description: Material Region to modulate values throughout the flow of the graph
================================================================================
== Author: Jens Kafitz | Mari Ideascale
== Web: www.campi3d.com
== Web: www.mari.ideascale.com
== Email: MariIdeas@campi3d.com
================================================================================
== Modified Date: April, 3 2015
================================================================================
== Redistribution and use in source and binary forms, with or without
== modification, are permitted provided that the following conditions are met:
==
== 1. Redistributions of source code must retain the above copyright
== notice, this list of conditions and the following disclaimer.
==
== 2. Redistributions in binary form must reproduce the above copyright
== notice, this list of conditions and the following disclaimer in the
== documentation and/or other materials provided with the distribution.
==
== 3. Neither the name of the copyright holder nor the names of its
== contributors may be used to endorse or promote products derived from
== this software without specific prior written permission.
==
== THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
== IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
== THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
== PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
== CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
== EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
== PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
== OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
== WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
== OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
== ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
================================================================================
-->

<Node>
    <ID>JK_Region</ID>
    <DefaultName>Material Region</DefaultName>
    <Category>Regions/Reflectance-Roughness/</Category>
    <Inputs>
        <Input Name="IN_A" PreferredInput='1'/>
        <Input Name="IN_B" PreferredInput='2'/>
        <Input Name="IN_C" PreferredInput='3'/>
        <Input Name="IN_D" PreferredInput='4'/>
        <Input Name="IN_E" PreferredInput='5'/>
        <Input Name="RegionMask" />
        <Input Name="diffuse" />
        <Input Name="specRough"/>
        <Input Name="specRefl"/>
        <Input Name="specCol"/>
        <Input Name="Disp"/>
        <Input Name="Normal"/>
        <Input Name="RGBA"/>
        <Input Name="FLOAT" />
    </Inputs>
    <Outputs>
        <Output Name="OUT_A" />
        <Output Name="OUT_B" />
        <Output Name="OUT_C" />
        <Output Name="OUT_D" />
        <Output Name="OUT_E" />
        <Output Name="DEBUG" />
    </Outputs>
    <Attributes>
    <Attribute Name="useRegion" PrettyName="Activate Region" Type="bool" Min="false" Max="true">true</Attribute>
    <Attribute Name="debugmode" PrettyName="Debug Output" Group="" Type="userenum">diffuse,diffuse,Roughness,Reflectance,specCol,Disp,Normal,RGBA,FLOAT,Diffuse,Spec Roughness,Spec Reflectance,Spec Color,Displacement,Normal,RGBA,FLOAT</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="diffuse_Use" PrettyName="On/Off" Group="Handle Diffuse (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="diffuse_color" PrettyName="Color" Group="Handle Diffuse (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
    <Attribute Name="diffuse_float" PrettyName="Float" Group="Handle Diffuse (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="diffuse_mix" PrettyName="Mix" Group="Handle Diffuse (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="diffuse_BlendMode" PrettyName="Mode" Group="Handle Diffuse (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="diffuse_sRGB" PrettyName="sRgb Input" Group="Handle Diffuse (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="diffuse_clamp" PrettyName="Clamp Input" Group="Handle Diffuse (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
     <!--===============================================================================================================-->
    <Attribute Name="roughness_Use" PrettyName="On/Off" Group="Handle Roughness (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="roughness_float" PrettyName="Float" Group="Handle Roughness (float)" Type="double">1.0</Attribute>
    <Attribute Name="roughness_mix" PrettyName="Mix" Group="Handle Roughness (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="roughness_BlendMode" PrettyName="Mode" Group="Handle Roughness (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="roughness_clamp" PrettyName="Clamp Input" Group="Handle Roughness (float)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="reflectance_Use" PrettyName="On/Off" Group="Handle Reflectance (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="reflectance_float" PrettyName="Float" Group="Handle Reflectance (float)" Type="double">1.0</Attribute>
    <Attribute Name="reflectance_mix" PrettyName="Mix" Group="Handle Reflectance (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="reflectance_BlendMode" PrettyName="Mode" Group="Handle Reflectance (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="reflectance_clamp" PrettyName="Clamp Input" Group="Handle Reflectance (float)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="specCol_Use" PrettyName="On/Off" Group="Handle Specular Color (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="specCol_color" PrettyName="Color" Group="Handle Specular Color (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
    <Attribute Name="specCol_float" PrettyName="Float" Group="Handle Specular Color (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="specCol_mix" PrettyName="Mix" Group="Handle Specular Color (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="specCol_BlendMode" PrettyName="Mode" Group="Handle Specular Color (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="specCol_sRGB" PrettyName="sRgb Input" Group="Handle Specular Color (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="specCol_clamp" PrettyName="Clamp Input" Group="Handle Specular Color (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="disp_Use" PrettyName="On/Off" Group="Handle Displacement/Bump (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="disp_float" PrettyName="Float" Group="Handle Displacement/Bump (float)" Type="double">1.0</Attribute>
    <Attribute Name="disp_mix" PrettyName="Mix" Group="Handle Displacement/Bump (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="disp_BlendMode" PrettyName="Mode" Group="Handle Displacement/Bump (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="disp_clamp" PrettyName="Clamp Input" Group="Handle Displacement/Bump (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="normal_Use" PrettyName="On/Off" Group="Handle Normal (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="normal_color" PrettyName="Color" Group="Handle Normal (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0.5,0.5,1.0,1.0)</Attribute>
    <Attribute Name="normal_float" PrettyName="Float" Group="Handle Normal (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="normal_mix" PrettyName="Mix" Group="Handle Normal (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="normal_BlendMode" PrettyName="Mode" Group="Handle Normal (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="normal_clamp" PrettyName="Clamp Input" Group="Handle Normal (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="addColor_Use" PrettyName="On/Off" Group="Handle Additional Color (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="addColor_color" PrettyName="Color" Group="Handle Additional Color (RGBA)" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
    <Attribute Name="addColor_float" PrettyName="Float" Group="Handle Additional Color (RGBA)" Type="double">1.0</Attribute>
    <Attribute Name="addColor_mix" PrettyName="Mix" Group="Handle Additional Color (RGBA)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="addColor_BlendMode" PrettyName="Mode" Group="Handle Additional Color (RGBA)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="addColor_Affect" PrettyName="Map to" Group="Handle Additional Color (RGBA)" Type="stringlist">New,New,Diffuse,Specular Color,Normal</Attribute>
    <Attribute Name="addColor_sRGB" PrettyName="sRgb Input" Group="Handle Additional Color (RGBA)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="addColor_clamp" PrettyName="Clamp Input" Group="Handle Additional Color (RGBA)" Type="bool" Min="false" Max="true">true</Attribute>
    <!--===============================================================================================================-->
    <Attribute Name="addFloat_Use" PrettyName="On/Off" Group="Handle Additional Float (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <Attribute Name="addFloat_float" PrettyName="Float" Group="Handle Additional Float (float)" Type="double">1.0</Attribute>
    <Attribute Name="addFloat_mix" PrettyName="Mix" Group="Handle Additional Float (float)" Type="double" Min="0.0" Max="1.0">1.0</Attribute>
    <Attribute Name="addFloat_BlendMode" PrettyName="Mode" Group="Handle Additional Float (float)" Type="userenum">Dynamic:MriBlendMode:Comp_Default</Attribute>
    <Attribute Name="addFloat_Affect" PrettyName="Map to" Group="Handle Additional Float (float)" Type="stringlist">New,New,Roughness,Reflectance,Displacement</Attribute>
    <Attribute Name="addFloat_clamp" PrettyName="Clamp Input" Group="Handle Additional Float (float)" Type="bool" Min="false" Max="true">false</Attribute>
    <!--===============================================================================================================-->
</Attributes>
 <Groups>
     <Group Name="Handle Diffuse (RGBA)" Expanded="false"></Group>
     <Group Name="Handle Roughness (float)" Expanded="false"></Group>
     <Group Name="Handle Reflectance (float)" Expanded="false"></Group>
     <Group Name="Handle Specular Color (RGBA)" Expanded="false"></Group>
     <Group Name="Handle Displacement/Bump (float)" Expanded="false"></Group>
     <Group Name="Handle Normal (RGBA)" Expanded="false"></Group>
     <Group Name="Handle Additional Color (RGBA)" Expanded="false"></Group>
     <Group Name="Handle Additional Float (float)" Expanded="false"></Group>
 </Groups>
 <Contexts>
        <Context Type="NodeGraphView">
            <Inputs>
                <Input Name="IN_A"><Pos>-200,-60</Pos></Input>
                <Input Name="IN_B"><Pos>-200,-40</Pos></Input>
                <Input Name="IN_C"><Pos>-200,-20</Pos></Input>
                <Input Name="IN_D"><Pos>-200,40</Pos></Input>
                <Input Name="IN_E"><Pos>-200,60</Pos></Input>
                <Input Name="RegionMask"><Pos>0,150</Pos></Input>

                <Input Name="diffuse"><Pos>0,-150</Pos></Input>
                <Input Name="specRough"><Pos>-60,-150</Pos></Input>
                <Input Name="specRefl"><Pos>-150,-150</Pos></Input>
                <Input Name="specCol"><Pos>-240,-150</Pos></Input>
                <Input Name="Disp"><Pos>60,-150</Pos></Input>
                <Input Name="Normal"><Pos>120,-150</Pos></Input>
                <Input Name="RGBA"><Pos>180,-150</Pos></Input>
                <Input Name="FLOAT"><Pos>240,-150</Pos></Input>


            </Inputs>

            <Outputs>
                <Output Name="OUT_E"><Pos>200,40</Pos></Output>
                <Output Name="OUT_D"><Pos>200,20</Pos></Output>
                <Output Name="OUT_C"><Pos>200,-20</Pos></Output>
                <Output Name="OUT_B"><Pos>200,-40</Pos></Output>
                <Output Name="OUT_A"><Pos>200,-60</Pos></Output>
                <Output Name="DEBUG"><Pos>200,60</Pos></Output>
            </Outputs>

        </Context>
        <Context Type="GLSL">
            <Shader ShaderType='Fragment'>
                <Inputs>
                <Input Name="diffuse"><Default>$diffuse_color*vec4($diffuse_float,$diffuse_float,$diffuse_float,1.0)</Default></Input>
                <Input Name="specRough"><Default>vec4($roughness_float,$roughness_float,$roughness_float,1.0) </Default></Input>
                <Input Name="specRefl"><Default>vec4($reflectance_float,$reflectance_float,$reflectance_float,1.0)</Default></Input>
                <Input Name="specCol"><Default>$specCol_color*vec4($specCol_float,$specCol_float,$specCol_float,1.0)</Default></Input>
                <Input Name="Disp"><Default>vec4($disp_float,$disp_float,$disp_float,1.0)</Default></Input>
                <Input Name="Normal"><Default>$normal_color*vec4($normal_float,$normal_float,$normal_float,1.0)</Default></Input>
                <Input Name="RGBA"><Default>$addColor_color*vec4($addColor_float,$addColor_float,$addColor_float,1.0)</Default></Input>
                <Input Name="FLOAT"><Default>vec4($addFloat_float,$addFloat_float,$addFloat_float,1.0)</Default></Input>

                <Input Name="IN_A"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_B"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_C"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_D"><Default>vec4(0.0)</Default></Input>
                <Input Name="IN_E"><Default>vec4(1.0)</Default></Input>
                <Input Name="RegionMask"><Default>vec4(1.0)</Default></Input>
                </Inputs>

   <Outputs>
                <Output Name="Debug"><Default>float(1.0)</Default></Output>
  </Outputs>
            </Shader>
            <Shader>
                <Body><![CDATA[


                 // Initalizing Attributes, necessary since <Default> on INPUTS doesn't do it
                 vec4 INIT_V4 =   $diffuse_color; INIT_V4 = $specCol_color; INIT_V4 = $normal_color; INIT_V4 = $addColor_color;
                 float INIT_FL =  $diffuse_float; INIT_FL = $roughness_float; INIT_FL = $reflectance_float; INIT_FL = $specCol_float;
                            INIT_FL = $disp_float; INIT_FL = $normal_float; INIT_FL = $addColor_float; INIT_FL = $addFloat_float;


                // Casting # to Variable
                vec4 diffuse_handle = #diffuse ;
                vec4 specRough_handle = #specRough ;
                vec4 specRefl_handle = #specRefl ;
                vec4 specCol_handle = #specCol ;
                vec4 disp_handle = #Disp ;
                vec4 normal_handle = #Normal ;
                vec4 addColor_handle = #RGBA ;
                vec4 addFloat_handle = #FLOAT ;


                // sRGB2Linear Conversion where checked
                if ($diffuse_sRGB)
                    {
                        vec4 diffuse_handle_conv;
                        for (int i = 0; i != 3; ++i) {
                                diffuse_handle_conv[i] = diffuse_handle[i] > 0.04045 ? pow((diffuse_handle[i]+0.055)/1.055, 2.4) : diffuse_handle[i] / 12.92;
                        }
                        diffuse_handle.rgb = diffuse_handle_conv.rgb;
                    }

                if ($specCol_sRGB)
                    {
                        vec4 specCol_handle_conv;
                        for (int i = 0; i != 3; ++i) {
                                specCol_handle_conv[i] = specCol_handle[i] > 0.04045 ? pow((specCol_handle[i]+0.055)/1.055, 2.4) : specCol_handle[i] / 12.92;
                        }
                        specCol_handle.rgb = specCol_handle_conv.rgb;
                    }

                if ($addColor_sRGB)
                    {
                        vec4 addColor_handle_conv;
                        for (int i = 0; i != 3; ++i) {
                                addColor_handle_conv[i] = addColor_handle[i] > 0.04045 ? pow((addColor_handle[i]+0.055)/1.055, 2.4) : addColor_handle[i] / 12.92;
                        }
                        addColor_handle.rgb = addColor_handle_conv.rgb;
                    }


                // Blending between clamped and unclamped.
                // CLamping here is only done directly on the region input (diffuse, specRough etc.)
                // not on any values coming from another region
                vec4 diffuse_clamp = mix(diffuse_handle,clamp(diffuse_handle,vec4(0.0),vec4(1.0)),float($diffuse_clamp));
                vec4 specRough_clamp = mix(specRough_handle,clamp(specRough_handle,vec4(0.0),vec4(1.0)),float($roughness_clamp));
                vec4 specRefl_clamp = mix(specRefl_handle,clamp(specRefl_handle,vec4(0.0),vec4(1.0)),float($reflectance_clamp));
                vec4 specCol_clamp = mix(specCol_handle,clamp(specCol_handle,vec4(0.0),vec4(1.0)),float($specCol_clamp));
                vec4 disp_clamp = mix(disp_handle,clamp(disp_handle,vec4(0.0),vec4(1.0)),float($disp_clamp));
                vec4 normal_clamp = mix(normal_handle,clamp(normal_handle,vec4(0.0),vec4(1.0)),float($normal_clamp));
                vec4 addColor_clamp = mix(addColor_handle,clamp(addColor_handle,vec4(0.0),vec4(1.0)),float($addColor_clamp));
                vec4 addFloat_clamp = mix(addFloat_handle,clamp(addFloat_handle,vec4(0.0),vec4(1.0)),float($addFloat_clamp));
                float regionmask = clamp(#RegionMask.r,0.0,1.0) * float($useRegion);


                // setting regionmask to 0 for values that are turned Off
                float diffuse_mix = (regionmask*$diffuse_mix) * float($diffuse_Use);
                float roughness_mix = (regionmask*$roughness_mix) * float($roughness_Use);
                float reflectance_mix = (regionmask*$reflectance_mix) * float($reflectance_Use);
                float specCol_mix = (regionmask*$specCol_mix) * float($specCol_Use);
                float disp_mix = (regionmask*$disp_mix) * float($disp_Use);
                float normal_mix = (regionmask*$normal_mix) * float($normal_Use);
                float addColor_mix = (regionmask*$addColor_mix) * float($addColor_Use);
                float addFloat_mix = (regionmask*$addFloat_mix) * float($addFloat_Use);


                // Blending Values within the Region (RegionInput from other region and each Attribute)
                vec4 diffuse = $diffuse_BlendMode(#IN_A,diffuse_clamp,diffuse_mix);
                vec4 roughness_Handle = vec4(#IN_B.r,#IN_B.r,#IN_B.r,1.0);
                vec4 Roughness = $roughness_BlendMode(roughness_Handle,specRough_clamp,roughness_mix);
                vec4 Reflectance_Handle = vec4(#IN_B.g,#IN_B.g,#IN_B.g,1.0);
                vec4 Reflectance = $reflectance_BlendMode(Reflectance_Handle,specRefl_clamp,reflectance_mix);
                vec4 specCol = $specCol_BlendMode(#IN_E,specCol_clamp,specCol_mix);
                vec4 disp_Handle = vec4(#IN_B.b,#IN_B.b,#IN_B.b,1.0);
                vec4 Disp = $disp_BlendMode(disp_Handle,disp_clamp,disp_mix);
                vec4 Normal = $normal_BlendMode(#IN_C,normal_clamp,normal_mix);
                vec4 NewFloat_Handle = vec4(#IN_B.a,#IN_B.a,#IN_B.a,1.0);


                // Blending additional values based on map target for Additional Color
                // If mapping to existing value some calculation has to be rerun to avoid premult issues.
                // Mapping is executed differently based on if corresponding channel is turned on in same region
                vec4 RGBA = #IN_D;

                if ($addColor_Affect == 0 && $addColor_Use == true) //Additional Color as new value
                    {
                        RGBA = $addColor_BlendMode(#IN_D,addColor_clamp,addColor_mix);
                    }

                else if ($addColor_Affect == 1 && $addColor_Use == true) // Affect  DIffuse
                    {
                        if ($diffuse_Use == true)
                            {
                                diffuse = $addColor_BlendMode(diffuse_clamp,addColor_clamp,$addColor_mix);
                                diffuse = $diffuse_BlendMode(#IN_A,diffuse,diffuse_mix);
                            }

                        else
                            {
                                diffuse = $addColor_BlendMode(#IN_A,addColor_clamp,$addColor_mix);
                            }
                    }

                else if ($addColor_Affect == 2 && $specCol_Use == true) // Affect SpecColor
                    {
                        if ($specCol_Use == true)
                            {
                                specCol = $addColor_BlendMode(specCol_clamp,addColor_clamp,$addColor_mix);
                                specCol = $specCol_BlendMode(#IN_E,specCol,specCol_mix);
                            }

                        else
                            {
                                specCol = $addColor_BlendMode(#IN_E,addColor_clamp,$addColor_mix);
                            }
                    }


                else if ($addColor_Affect == 3 && $addColor_Use == true) // Affect Normal
                    {
                        if ($normal_Use == true)
                            {
                                Normal = $addColor_BlendMode(normal_clamp,addColor_clamp,$addColor_mix);
                                Normal = $normal_BlendMode(#IN_C,Normal,normal_mix);
                            }

                        else
                            {
                                Normal = $addColor_BlendMode(#IN_C,addColor_clamp,$addColor_mix);
                            }
                    }



                // Blending additional values based on map target for Additional Float
                // If mapping to existing value some calculation has to be rerun to avoid premult issues.
                // Mapping is executed differently based on if corresponding channel is turned on in same region
               vec4 FLOAT = NewFloat_Handle;

                if ($addFloat_Affect == 0 && $addFloat_Use == true) //Additional Float as new value
                    {
                        FLOAT = $addFloat_BlendMode(NewFloat_Handle,addFloat_clamp,addFloat_mix);
                    }

                else if ($addFloat_Affect == 1 && $addFloat_Use == true) // Affect  SpecRough
                    {
                        if($roughness_Use == true)
                             {
                                Roughness = $addFloat_BlendMode(specRough_clamp,addFloat_clamp,$addFloat_mix);
                                Roughness = $roughness_BlendMode(roughness_Handle,Roughness,roughness_mix);
                             }

                        else
                            {
                                Roughness = $addFloat_BlendMode(roughness_Handle,addFloat_clamp,$addFloat_mix);
                            }
                    }

                else if ($addFloat_Affect == 2 && $addFloat_Use == true) // Affect SpecRefl
                    {
                        if($reflectance_Use == true)
                             {
                                Reflectance = $addFloat_BlendMode(specRefl_clamp,addFloat_clamp,$addFloat_mix);
                                Reflectance = $reflectance_BlendMode(Reflectance_Handle,Reflectance,reflectance_mix);
                             }

                        else
                            {
                                Reflectance = $addFloat_BlendMode(Reflectance_Handle,addFloat_clamp,$addFloat_mix);
                            }
                    }

                else if ($addFloat_Affect == 3 && $addFloat_Use == true) // Affect Disp
                    {
                        if($disp_Use == true)
                             {
                                Disp = $addFloat_BlendMode(disp_clamp,addFloat_clamp,$addFloat_mix);
                                Disp = $disp_BlendMode(disp_Handle,Disp,disp_mix);
                             }

                        else
                            {
                                Disp = $addFloat_BlendMode(disp_Handle,addFloat_clamp,$addFloat_mix);
                            }
                    }



                // Output to Handles. Roughness,reflectance & disp are carried on signle variable
                OUT_A = diffuse;
                OUT_B = vec4(Roughness.r,Reflectance.r,Disp.r,FLOAT.r);
                OUT_C = Normal;
                OUT_D = RGBA;
                OUT_E = specCol;
                DEBUG = $debugmode;





                ]]></Body>
            </Shader>
        </Context>
    </Contexts>
</Node>

