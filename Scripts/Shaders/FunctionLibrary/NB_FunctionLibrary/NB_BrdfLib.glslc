#version 150

////////////////////////////////////////////////////////////////////////////////
// Mari Procedural Shader Library Registration
// Copyright (c) 2014 Nicholas Breslow. All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////// 
// File: NB_BrdfLib.glslc   
// Description: Shading library for various BRDF shading models.
////////////////////////////////////////////////////////////////////////////////
// Author: Nicholas Breslow         
// Web: www.nbreslow.com                
// Email: nick@nbreslow.com
////////////////////////////////////////////////////////////////////////////////
// Date: Feb 15, 2014
////////////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify     
// it under the terms of the GNU General Public License as published by     
// the Free Software Foundation, either version 3 of the License, or        
// (at your option) any later version.                                      
//                                                                          
// This program is distributed in the hope that it will be useful,          
// but WITHOUT ANY WARRANTY; without even the implied warranty of           
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            
// GNU General Public License for more details.                             
//                                                                          
// You should have received a copy of the GNU General Public License        
// along with this program.  If not, see <http://www.gnu.org/licenses/>.    
////////////////////////////////////////////////////////////////////////////////

// Clamp value to 0...1 'float'
float nb_saturate(float v)
{
    return clamp(v,0.0,1.0);
}

// Calculate the tangent and binormal from the input normal vector
void nb_tangentVectors(vec3 N, float anisotropicRotation, out vec3 X, out vec3 Y)
{
    // Tangent Direction
    vec3 anisoDirection = vec3(1.0 - anisotropicRotation,0.0 + anisotropicRotation,0.0); 

    // Tangent and Bitangent
    X = normalize(cross(N,anisoDirection)); 
    Y = normalize(cross(N,X));
}

// Oren Nayar Diffuse
// "Generalization of Lambert's Reflectance Model" M. Oren and S.K. Nayar, SIGGRAPH p.239-246, July, 1994
// oren nayar diffuse variant implementation source by Nicholas Breslow (www.nbreslow.com)
float nb_orenNayar(vec3 I, vec3 N, vec3 L, float roughness)
{
    // Constant Variables
    float R = roughness*roughness;
    float A = 1.0 - 0.5 * (R / (R + 0.33));
    float B = 0.45 * R / (R + 0.09);

    // Incoming Angle Calculations
    float NdotI = nb_saturate(dot(N,I));
    float NdotL = nb_saturate(dot(N,L));

    // Oren Nayar Diffuse Core
    float theta_r = acos(NdotI);
    float theta_i = acos(NdotL);
    float cos_phi_diff = dot(normalize(I - N * NdotI), normalize(L - N * NdotL));

    // Alpha And Beta
    float alpha = max(theta_i,theta_r);
    float beta = min(theta_i,theta_r);

    // Cos Phi Calculation
    if (cos_phi_diff>=0)
    {    
        B = B * sin(alpha) * tan(beta) * max(0.0,cos_phi_diff);
    }
    else
    {
        B = 0.0;
    }

    // Oren Nayar Diffuse
    return (NdotL * (A+B));
}

// Ward Anisotropic Specular
// “Measuring and Modelling Anisotropic Reflection” Gregory J. Ward, Computer Graphics 26, 2, July 1992
// Ward Anisotropic variant implementation source by Nicholas Breslow (www.nbreslow.com)
float nb_wardAnisotropic(vec3 N, vec3 I, vec3 L, vec3 X, vec3 Y, float SpecularRoughness, float Anisotropy)
{
    // Anisotropic Roughness Variables
    vec2 AnisoRoughness = vec2(SpecularRoughness, (SpecularRoughness / max(Anisotropy,0.001)));

    vec3 H = normalize(L+I); // Half-Vector

    float NdotL = nb_saturate(dot(N,L));
    float NdotV = nb_saturate(dot(N,I));
    float NdotH = nb_saturate(dot(N,H));
    float HdotX = dot(H,X);
    float HdotY = dot(H,Y);
    
    float FirstTerm = 1.0 / sqrt(clamp(NdotL*NdotV,0.01,1));
    float SecondTerm = 1.0 / (12.57 * AnisoRoughness.x * AnisoRoughness.y);
    float A = -2.0 * (pow((HdotX / AnisoRoughness.x),2) + pow((HdotY / AnisoRoughness.y),2));
    float B = 1.0 + NdotH;
    float ThirdTerm = exp(A / B);
    float ssNdotL = smoothstep(0,0.25,NdotL); // Optional Addition
    float Irradiance = max(0.0,ssNdotL);

    // Ward Anisotropic Specular
    float SpecTerm = FirstTerm * SecondTerm * ThirdTerm * Irradiance;

    return SpecTerm;
}

// Ward Isotropic Specular
// “Measuring and Modelling Anisotropic Reflection” Gregory J. Ward, Computer Graphics 26, 2, July 1992
// Ward Anisotropic variant implementation source by Nicholas Breslow (www.nbreslow.com)
float nb_wardIsotropic(vec3 N, vec3 I, vec3 L, float SpecularRoughness)
{
    vec3 H = normalize(L+I); // Half-Vector

    float NdotL = nb_saturate(dot(N,L));
    float NdotV = nb_saturate(dot(N,I));
    float NdotH = nb_saturate(dot(N,H));

    float tan2NdotH = -pow(tan(acos(NdotH)),2);
    float RMS2 = pow(SpecularRoughness, 2);
    float Den = 6.28 * RMS2;

    float FirstTerm = exp(tan2NdotH/RMS2)/Den;
    float SecondTerm = 1.0/sqrt(clamp(NdotL*NdotV,0.1,1.0));
    float ssNdotL = smoothstep(0,0.25,NdotL); // Optional Addition
    float Irradiance = max(0.0,ssNdotL);

    // Ward Isotropic Specular
    float SpecTerm = FirstTerm * SecondTerm * Irradiance;

    return SpecTerm;
}