////////////////////////////////////////////////////////////////////////////////
// Mari Procedural Shader Library Registration
// Copyright (c) 2014 Nicholas Breslow. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: NB_ProceduralLib.glslc
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////
// Author: Nicholas Breslow
// Web: www.nbreslow.com
// Email: nick@nbreslow.com
////////////////////////////////////////////////////////////////////////////////
// Date: Feb 12, 2014
////////////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////////////

// Utility Functions
float nb_sq(float x);

// Compute the UV rotation matrix
mat2 nb_uvRotation(float angle);

// Compute the UV repeat and offset on the UV Coords
vec2 nb_uvMod(vec2 uv, float repeat, vec2 uvRepeat, vec2 uvOffset);

// Compute a procedural 2D Dot pattern
float nb_dots2D(vec2 uv, float Scale);

// Compute a procedural 2D stripe pattern
float nb_stripes2D(vec2 uv, float Scale);

// Compute a procedural 2D super ellipse pattern
// Source: http://en.wikipedia.org/wiki/Superellipse
float nb_superEllipse2D(vec2 uv, float Scale, float Corner);

// Compute a procedural 2D super shape pattern
// Credit: "A generic geometric transformation that unifies a wide range of natural
// and abstract shapes" Gielis, Johan, American Journal of Botany 90 (3) p.333â€“338, 2003
// Source: http://www.amjbot.org/cgi/content/abstract/90/3/333
float nb_superShape2D(vec2 uv, float Scale, float angle, float a, float b, float m, float n1, float n2, float n3, out float gradient);

// Compute a procedural 2D weave shape pattern
void nb_superWeave2D(vec2 uv, float contrast, out float d0, out float d1, out float f0, out float f1);

// Functions for aliasing & smoothing
float nb_AAstep(float threshold, float varyingVal);

// Shading Functions
float nb_luminance(vec3 colorIn);